:-module(smallStepSolve,_).
logen(run/1,run([])).
logen(run/1,run([A])) :-
    logen(unfold,bigStepPred(A)),
    logen(memo,smallStep(A,B)),
    logen(memo,run(B)).
logen(smallStep/2,smallStep(A,[])) :-
    logen(unfold,leaf(A)),
    logen(unfold,clpClause(_,A,B)),
    logen(unfold,callPreds(B)).
logen(smallStep/2,smallStep(bigstep(B,C,D),A)) :-
    logen(unfold,nonLeaf(bigstep(B,C,D))),
    logen(unfold,clpClause(E,bigstep(B,C,D),[F|G])),
    logen(unfold,evalConditions([F|G],[H|I])),
    logen(unfold,nextStep([H|I],E,A)).
logen(nextStep/3,nextStep([B|C],_,A)) :-
    logen(memo,leaf(B)),
    logen(unfold,evalConditions(C,A)),
    logen(memo,smallStep(B,[])).
logen(nextStep/3,nextStep([bigstep(C,D,E)|B],A,[F])) :-
    logen(memo,nonLeaf(bigstep(C,D,E))),
    logen(memo,smallStep(bigstep(C,D,E),[bigstep(G,H,I)])),
    logen(unfold,tryFold(A,F,[bigstep(G,H,I)|B])).
logen(tryFold/3,tryFold(_,A,[A])).
logen(tryFold/3,tryFold(A,B,[C|D])) :-
    logen(call,D\==[]),
    logen(unfold,clpClause(A,B,[C|D])).
logen(evalConditions/2,evalConditions([],[])).
logen(evalConditions/2,evalConditions([A|B],[A|B])) :-
    logen(unfold,bigStepPred(A)).
logen(evalConditions/2,evalConditions([B|C],A)) :-
    logen(unfold,otherPred(B)),
    logen(memo,eval(B)),
    logen(unfold,evalConditions(C,A)).
logen(eval/1,eval(A)) :-
    logen(unfold,constraint(A)),
    logen(rescall,call(A)).
logen(eval/1,eval(A)) :-
    logen(unfold,clpClause(_,A,B)),
    logen(unfold,callPreds(B)).
logen(callPreds/1,callPreds([])).
logen(callPreds/1,callPreds([A|B])) :-
    logen(memo,eval(A)),
    logen(unfold,callPreds(B)).
logen(bigStepPred/1,bigStepPred(bigstep(_,_,_))).
logen(bigStepPred/1,bigStepPred(controlExpr(_,_,_,_))).
logen(otherPred/1,otherPred(A)) :-
    logen(call,functor(A,B,C)),
    logen(call,member(B/C,[eval/4,find/3,gt/3,lt/3,gte/3,lte/3,eq/3,negate/2,save/4])).
logen(otherPred/1,otherPred(A)) :-
    logen(unfold,constraint(A)).
logen(leaf/1,leaf(A)) :-
    logen(unfold,clpClause(_,leaf(A),[])).
logen(nonLeaf/1,nonLeaf(A)) :-
    logen(unfold,clpClause(_,nonLeaf(A),[])).
logen(constraint/1,constraint(_=_)).
logen(constraint/1,constraint(_<_)).
logen(constraint/1,constraint(_>_)).
logen(constraint/1,constraint(_=<_)).
logen(constraint/1,constraint(_>=_)).
logen(constraint/1,constraint(_ is _)).
logen(constraint/1,constraint(_=:=_)).
logen(constraint/1,constraint(_\==_)).
logen(constraint/1,constraint(_\=_)).
logen(clpClause/3,clpClause(0,bigstep(val(A),_,A),[])).
logen(clpClause/3,clpClause(1,bigstep(var(C),A,B),[find(A,C,B)])).
logen(clpClause/3,clpClause(2,bigstep(lam(B,C),A,clo(B,C,A)),[])).
logen(clpClause/3,clpClause(3,bigstep(app(C,D),A,B),[bigstep(C,A,clo(E,F,G)),bigstep(app2(clo(E,F,G),D),A,B)])).
logen(clpClause/3,clpClause(4,bigstep(app2(clo(D,E,F),C),A,B),[bigstep(C,A,G),save(D,G,F,H),bigstep(E,H,B)])).
logen(clpClause/3,clpClause(5,find([(A,B)|_],A,B),[])).
logen(clpClause/3,clpClause(6,find([(D,_)|C],A,B),[A\==D,find(C,A,B)])).
logen(clpClause/3,clpClause(7,save(A,B,[(A,_)|C],[(A,D)|C]),[D=B])).
logen(clpClause/3,clpClause(8,save(A,B,[(D,E)|C],[(D,E)|F]),[A\==D,save(A,B,C,F)])).
logen(clpClause/3,clpClause(9,save(A,B,[],[(A,C)]),[C=B])).
logen(clpClause/3,clpClause(10,leaf(bigstep(var(_),_,_)),[])).
logen(clpClause/3,clpClause(11,leaf(bigstep(val(_),_,_)),[])).
logen(clpClause/3,clpClause(12,leaf(bigstep(lam(_,_),_,_)),[])).
logen(clpClause/3,clpClause(13,nonLeaf(bigstep(app(_,_),_,_)),[])).
logen(clpClause/3,clpClause(14,nonLeaf(bigstep(app2(_,_),_,_)),[])).

logen(test/1,test(A)) :-
    logen(unfold,exCode(B)),
    logen(unfold,run([bigstep(B,[(x,5),(y,2),(z,3)],A)])).
logen(exCode/1,exCode(while(var(x)>cns(nat(0)),asg(var(x),sub(var(x),cns(nat(1))))))).
:- filter
    run(dynamic).
:- filter
    smallStep(nonvar,dynamic).
:- filter
    eval(nonvar).
:- filter
    leaf(dynamic).
:- filter
    nonLeaf(dynamic).
